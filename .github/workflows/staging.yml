name: staging - test + deploy + smoke

on:
  push:
    branches-ignore: [ main ]   # everything except main goes to staging

concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-deploy-staging:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: p5
          POSTGRES_PASSWORD: p5pass
          POSTGRES_DB: p5db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U p5 -d p5db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://p5:p5pass@localhost:5432/p5db?schema=public&sslmode=disable
      RATE_LIMIT_MAX: "100"
      RATE_LIMIT_TIME_WINDOW: "1 minute"
      PRISMA_GENERATE_SKIP_AUTOINSTALL: "1"
      # Generate client inside API package (this path is proven OK for staging)
      PRISMA_CLIENT_OUTPUT: ${{ github.workspace }}/apps/api/node_modules/.prisma/client
      JWT_SECRET: ci_secret_for_tests
      CORS_ORIGINS: "*"

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4

      - name: üîß Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ pnpm (from package.json)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: üì• Install deps (no postinstall)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: üî® Prisma generate (into API package)
        run: |
          pnpm --filter @p5/prisma exec prisma generate --schema ./prisma/schema.prisma
          ls -la "${PRISMA_CLIENT_OUTPUT}"

      - name: üóÑÔ∏è Migrate ephemeral Postgres
        env:
          PRISMA_MIGRATE_SKIP_GENERATE: "1"
        run: |
          pnpm --filter @p5/prisma exec prisma migrate deploy --schema ./prisma/schema.prisma

      - name: üß™ Run tests
        run: pnpm --filter @p5/api test

      - name: üõ´ Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: üîê Verify Fly token
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if [ -z "${FLY_API_TOKEN}" ]; then
            echo "FLY_API_TOKEN is missing. Add it in GitHub ‚Üí Settings ‚Üí Secrets ‚Üí Actions."
            exit 1
          fi

      - name: Tag GIT_SHA on staging app
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Setting GIT_SHA=${{ github.sha }} on app p5-api-staging ..."
          flyctl secrets set GIT_SHA="${{ github.sha }}" -a p5-api-staging

      - name: üöÄ Deploy to Fly (staging)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: timeout 15m flyctl deploy --remote-only --app p5-api-staging

      - name: üîé Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: ü©∫ Smoke test against staging
        env:
          APP_URL: https://p5-api-staging.fly.dev
        shell: bash
        run: |
          set -euo pipefail

          echo "Probing $APP_URL/ready until 200..."
          for i in {1..45}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/ready" || true)
            if [ "$code" = "200" ]; then
              echo "Ready check OK."
              break
            fi
            echo "Attempt $i/45 ... got $code, sleeping 2s"
            sleep 2
          done

          echo "Health:"  && curl -s "$APP_URL/health"
          echo "Version:" && curl -s "$APP_URL/version"

          email="ci-stg-$(date +%s)@example.com"
          echo "Creating user: $email"
          created=$(curl -s -H "Content-Type: application/json" \
            --data "{\"email\":\"$email\",\"name\":\"Staging Smoke\"}" \
            "$APP_URL/api/users")
          echo "Created: $created"

          id=$(echo "$created" | jq -r '.id')
          [ -n "$id" ] && [ "$id" != "null" ] || { echo "‚ùå No user id returned"; exit 1; }

          list=$(curl -s "$APP_URL/api/users")
          echo "$list" | jq -r '.[].email' | grep -q "$email" || { echo "‚ùå user not found in list"; exit 1; }

          delCode=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "$APP_URL/api/users/$id")
          [ "$delCode" = "204" ] || { echo "‚ùå delete failed with $delCode"; exit 1; }

          echo "‚úÖ Staging smoke test passed."