name: test + deploy

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: p5
          POSTGRES_PASSWORD: p5pass
          POSTGRES_DB: p5db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U p5 -d p5db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://p5:p5pass@localhost:5432/p5db?schema=public&sslmode=disable
      RATE_LIMIT_MAX: "100"
      RATE_LIMIT_TIME_WINDOW: "1 minute"
      PRISMA_GENERATE_SKIP_AUTOINSTALL: "1"

    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Use the pnpm version from package.json "packageManager"
      - name: 📦 pnpm setup
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: 🔎 pnpm -v
        run: pnpm -v

      - name: 📥 Install deps (lockfile)
        run: pnpm install --frozen-lockfile

      # 🔑 CRITICAL: generate client from the API cwd so @prisma/client can import
      - name: 🔨 Prisma generate into API package
        run: |
          set -euxo pipefail
          cd apps/api
          export PRISMA_CLIENT_OUTPUT=./node_modules/.prisma/client
          timeout 3m pnpm --filter @p5/prisma exec prisma generate --schema ../../prisma/schema.prisma
          echo "== contents of .prisma/client =="
          ls -la ./node_modules/.prisma/client

      - name: 🗄️ Migrate ephemeral Postgres
        run: |
          set -euxo pipefail
          timeout 3m pnpm --filter @p5/prisma exec prisma migrate deploy --schema prisma/schema.prisma

      - name: 🧪 Run tests
        run: pnpm --filter @p5/api test

      - name: 🛫 Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: 🚀 Deploy to Fly
        if: ${{ success() }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: timeout 15m flyctl deploy --remote-only --app p5-api