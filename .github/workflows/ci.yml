name: test + deploy

on:
  push:
    branches: [ main ]

# cancel older runs of the same ref
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Ephemeral Postgres for tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: p5
          POSTGRES_PASSWORD: p5pass
          POSTGRES_DB: p5db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U p5 -d p5db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://p5:p5pass@localhost:5432/p5db?schema=public&sslmode=disable
      RATE_LIMIT_MAX: "100"
      RATE_LIMIT_TIME_WINDOW: "1 minute"
      PRISMA_GENERATE_SKIP_AUTOINSTALL: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (with pnpm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      # Cache pnpm store to speed up installs across runs
      - name: Cache pnpm store
        id: pnpm-cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install deps (lockfile, with retries)
        run: |
          pnpm install --frozen-lockfile --reporter=append \
            --fetch-retries=5 --fetch-retry-factor=2 --fetch-retry-maxtimeout=60000

      # Generate Prisma client into APIâ€™s node_modules
      - name: Prisma generate (into @p5/api)
        working-directory: apps/api
        env:
          PRISMA_CLIENT_OUTPUT: ./node_modules/.prisma/client
        run: |
          pnpm --filter @p5/prisma exec prisma generate --schema ../../prisma/schema.prisma
          ls -la ./node_modules/.prisma/client

      # Apply migrations to the ephemeral CI DB
      - name: Prisma migrate (deploy)
        working-directory: prisma
        run: pnpm exec prisma migrate deploy --schema ./schema.prisma

      - name: Run tests
        run: pnpm --filter @p5/api test

      # Deploy only if tests pass
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Deploy to Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: timeout 15m flyctl deploy --remote-only --app p5-api