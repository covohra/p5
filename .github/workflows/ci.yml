name: test + deploy

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Ephemeral Postgres for tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: p5
          POSTGRES_PASSWORD: p5pass
          POSTGRES_DB: p5db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U p5 -d p5db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://p5:p5pass@localhost:5432/p5db?schema=public&sslmode=disable
      RATE_LIMIT_MAX: "100"
      RATE_LIMIT_TIME_WINDOW: "1 minute"
      PRISMA_GENERATE_SKIP_AUTOINSTALL: "1"
      # Generate Prisma client where @prisma/client expects it (repo root node_modules)
      PRISMA_CLIENT_OUTPUT: ${{ github.workspace }}/node_modules/.prisma/client

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Node 20
        uses: actions/setup-node@v5
        with:
          node-version: 20

      # Use pnpm version from package.json "packageManager"
      - name: pnpm setup
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install deps (no postinstall)
        run: pnpm install --frozen-lockfile --ignore-scripts

      # Run Prisma from the @p5/prisma workspace (CWD == prisma/)
      - name: Prisma generate (into root .prisma/client)
        run: |
          pnpm --filter @p5/prisma exec prisma generate --schema ./schema.prisma
          echo "== contents of root node_modules/.prisma/client =="
          ls -la "${PRISMA_CLIENT_OUTPUT}"

      - name: Prisma migrate (deploy)
        env:
          PRISMA_MIGRATE_SKIP_GENERATE: "1"
        run: |
          pnpm --filter @p5/prisma exec prisma migrate deploy --schema ./schema.prisma

      - name: Run tests
        run: pnpm --filter @p5/api test

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Verify Fly token is present
        run: |
          if [ -z "${FLY_API_TOKEN}" ]; then
            echo "FLY_API_TOKEN is missing. Add it in GitHub → Settings → Secrets → Actions."
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly
        if: ${{ success() }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: timeout 15m flyctl deploy --remote-only --app p5-api